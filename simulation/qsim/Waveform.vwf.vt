// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/26/2024 18:45:17"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    wordle
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module wordle_vlg_sample_tst(
	clk,
	enter,
	switch_input,
	sampler_tx
);
input  clk;
input  enter;
input [9:0] switch_input;
output sampler_tx;

reg sample;
time current_time;
always @(clk or enter or switch_input)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module wordle_vlg_check_tst (
	LED1,
	LED2,
	LED3,
	LED4,
	SS1,
	SS2,
	SS3,
	SS4,
	count,
	sampler_rx
);
input  LED1;
input  LED2;
input  LED3;
input  LED4;
input [6:0] SS1;
input [6:0] SS2;
input [6:0] SS3;
input [6:0] SS4;
input [3:0] count;
input sampler_rx;

reg  LED1_expected;
reg  LED2_expected;
reg  LED3_expected;
reg  LED4_expected;
reg [6:0] SS1_expected;
reg [6:0] SS2_expected;
reg [6:0] SS3_expected;
reg [6:0] SS4_expected;
reg [3:0] count_expected;

reg  LED1_prev;
reg  LED2_prev;
reg  LED3_prev;
reg  LED4_prev;
reg [6:0] SS1_prev;
reg [6:0] SS2_prev;
reg [6:0] SS3_prev;
reg [6:0] SS4_prev;
reg [3:0] count_prev;

reg  LED1_expected_prev;
reg  LED2_expected_prev;
reg  LED3_expected_prev;
reg  LED4_expected_prev;
reg [6:0] SS1_expected_prev;
reg [6:0] SS2_expected_prev;
reg [6:0] SS3_expected_prev;
reg [6:0] SS4_expected_prev;
reg [3:0] count_expected_prev;

reg  last_LED1_exp;
reg  last_LED2_exp;
reg  last_LED3_exp;
reg  last_LED4_exp;
reg [6:0] last_SS1_exp;
reg [6:0] last_SS2_exp;
reg [6:0] last_SS3_exp;
reg [6:0] last_SS4_exp;
reg [3:0] last_count_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	LED1_prev = LED1;
	LED2_prev = LED2;
	LED3_prev = LED3;
	LED4_prev = LED4;
	SS1_prev = SS1;
	SS2_prev = SS2;
	SS3_prev = SS3;
	SS4_prev = SS4;
	count_prev = count;
end

// update expected /o prevs

always @(trigger)
begin
	LED1_expected_prev = LED1_expected;
	LED2_expected_prev = LED2_expected;
	LED3_expected_prev = LED3_expected;
	LED4_expected_prev = LED4_expected;
	SS1_expected_prev = SS1_expected;
	SS2_expected_prev = SS2_expected;
	SS3_expected_prev = SS3_expected;
	SS4_expected_prev = SS4_expected;
	count_expected_prev = count_expected;
end



// expected LED1
initial
begin
	LED1_expected = 1'bX;
end 

// expected LED2
initial
begin
	LED2_expected = 1'bX;
end 

// expected LED3
initial
begin
	LED3_expected = 1'bX;
end 

// expected LED4
initial
begin
	LED4_expected = 1'bX;
end 
// expected SS1[ 6 ]
initial
begin
	SS1_expected[6] = 1'bX;
end 
// expected SS1[ 5 ]
initial
begin
	SS1_expected[5] = 1'bX;
end 
// expected SS1[ 4 ]
initial
begin
	SS1_expected[4] = 1'bX;
end 
// expected SS1[ 3 ]
initial
begin
	SS1_expected[3] = 1'bX;
end 
// expected SS1[ 2 ]
initial
begin
	SS1_expected[2] = 1'bX;
end 
// expected SS1[ 1 ]
initial
begin
	SS1_expected[1] = 1'bX;
end 
// expected SS1[ 0 ]
initial
begin
	SS1_expected[0] = 1'bX;
end 
// expected SS2[ 6 ]
initial
begin
	SS2_expected[6] = 1'bX;
end 
// expected SS2[ 5 ]
initial
begin
	SS2_expected[5] = 1'bX;
end 
// expected SS2[ 4 ]
initial
begin
	SS2_expected[4] = 1'bX;
end 
// expected SS2[ 3 ]
initial
begin
	SS2_expected[3] = 1'bX;
end 
// expected SS2[ 2 ]
initial
begin
	SS2_expected[2] = 1'bX;
end 
// expected SS2[ 1 ]
initial
begin
	SS2_expected[1] = 1'bX;
end 
// expected SS2[ 0 ]
initial
begin
	SS2_expected[0] = 1'bX;
end 
// expected SS3[ 6 ]
initial
begin
	SS3_expected[6] = 1'bX;
end 
// expected SS3[ 5 ]
initial
begin
	SS3_expected[5] = 1'bX;
end 
// expected SS3[ 4 ]
initial
begin
	SS3_expected[4] = 1'bX;
end 
// expected SS3[ 3 ]
initial
begin
	SS3_expected[3] = 1'bX;
end 
// expected SS3[ 2 ]
initial
begin
	SS3_expected[2] = 1'bX;
end 
// expected SS3[ 1 ]
initial
begin
	SS3_expected[1] = 1'bX;
end 
// expected SS3[ 0 ]
initial
begin
	SS3_expected[0] = 1'bX;
end 
// expected SS4[ 6 ]
initial
begin
	SS4_expected[6] = 1'bX;
end 
// expected SS4[ 5 ]
initial
begin
	SS4_expected[5] = 1'bX;
end 
// expected SS4[ 4 ]
initial
begin
	SS4_expected[4] = 1'bX;
end 
// expected SS4[ 3 ]
initial
begin
	SS4_expected[3] = 1'bX;
end 
// expected SS4[ 2 ]
initial
begin
	SS4_expected[2] = 1'bX;
end 
// expected SS4[ 1 ]
initial
begin
	SS4_expected[1] = 1'bX;
end 
// expected SS4[ 0 ]
initial
begin
	SS4_expected[0] = 1'bX;
end 
// expected count[ 3 ]
initial
begin
	count_expected[3] = 1'bX;
end 
// expected count[ 2 ]
initial
begin
	count_expected[2] = 1'bX;
end 
// expected count[ 1 ]
initial
begin
	count_expected[1] = 1'bX;
end 
// expected count[ 0 ]
initial
begin
	count_expected[0] = 1'bX;
end 
// generate trigger
always @(LED1_expected or LED1 or LED2_expected or LED2 or LED3_expected or LED3 or LED4_expected or LED4 or SS1_expected or SS1 or SS2_expected or SS2 or SS3_expected or SS3 or SS4_expected or SS4 or count_expected or count)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected LED1 = %b | expected LED2 = %b | expected LED3 = %b | expected LED4 = %b | expected SS1 = %b | expected SS2 = %b | expected SS3 = %b | expected SS4 = %b | expected count = %b | ",LED1_expected_prev,LED2_expected_prev,LED3_expected_prev,LED4_expected_prev,SS1_expected_prev,SS2_expected_prev,SS3_expected_prev,SS4_expected_prev,count_expected_prev);
	$display("| real LED1 = %b | real LED2 = %b | real LED3 = %b | real LED4 = %b | real SS1 = %b | real SS2 = %b | real SS3 = %b | real SS4 = %b | real count = %b | ",LED1_prev,LED2_prev,LED3_prev,LED4_prev,SS1_prev,SS2_prev,SS3_prev,SS4_prev,count_prev);
`endif
	if (
		( LED1_expected_prev !== 1'bx ) && ( LED1_prev !== LED1_expected_prev )
		&& ((LED1_expected_prev !== last_LED1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED1_expected_prev);
		$display ("     Real value = %b", LED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LED1_exp = LED1_expected_prev;
	end
	if (
		( LED2_expected_prev !== 1'bx ) && ( LED2_prev !== LED2_expected_prev )
		&& ((LED2_expected_prev !== last_LED2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED2_expected_prev);
		$display ("     Real value = %b", LED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LED2_exp = LED2_expected_prev;
	end
	if (
		( LED3_expected_prev !== 1'bx ) && ( LED3_prev !== LED3_expected_prev )
		&& ((LED3_expected_prev !== last_LED3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED3_expected_prev);
		$display ("     Real value = %b", LED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LED3_exp = LED3_expected_prev;
	end
	if (
		( LED4_expected_prev !== 1'bx ) && ( LED4_prev !== LED4_expected_prev )
		&& ((LED4_expected_prev !== last_LED4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED4_expected_prev);
		$display ("     Real value = %b", LED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LED4_exp = LED4_expected_prev;
	end
	if (
		( SS1_expected_prev[0] !== 1'bx ) && ( SS1_prev[0] !== SS1_expected_prev[0] )
		&& ((SS1_expected_prev[0] !== last_SS1_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SS1_exp[0] = SS1_expected_prev[0];
	end
	if (
		( SS1_expected_prev[1] !== 1'bx ) && ( SS1_prev[1] !== SS1_expected_prev[1] )
		&& ((SS1_expected_prev[1] !== last_SS1_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SS1_exp[1] = SS1_expected_prev[1];
	end
	if (
		( SS1_expected_prev[2] !== 1'bx ) && ( SS1_prev[2] !== SS1_expected_prev[2] )
		&& ((SS1_expected_prev[2] !== last_SS1_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SS1_exp[2] = SS1_expected_prev[2];
	end
	if (
		( SS1_expected_prev[3] !== 1'bx ) && ( SS1_prev[3] !== SS1_expected_prev[3] )
		&& ((SS1_expected_prev[3] !== last_SS1_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SS1_exp[3] = SS1_expected_prev[3];
	end
	if (
		( SS1_expected_prev[4] !== 1'bx ) && ( SS1_prev[4] !== SS1_expected_prev[4] )
		&& ((SS1_expected_prev[4] !== last_SS1_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SS1_exp[4] = SS1_expected_prev[4];
	end
	if (
		( SS1_expected_prev[5] !== 1'bx ) && ( SS1_prev[5] !== SS1_expected_prev[5] )
		&& ((SS1_expected_prev[5] !== last_SS1_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SS1_exp[5] = SS1_expected_prev[5];
	end
	if (
		( SS1_expected_prev[6] !== 1'bx ) && ( SS1_prev[6] !== SS1_expected_prev[6] )
		&& ((SS1_expected_prev[6] !== last_SS1_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS1_expected_prev);
		$display ("     Real value = %b", SS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SS1_exp[6] = SS1_expected_prev[6];
	end
	if (
		( SS2_expected_prev[0] !== 1'bx ) && ( SS2_prev[0] !== SS2_expected_prev[0] )
		&& ((SS2_expected_prev[0] !== last_SS2_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SS2_exp[0] = SS2_expected_prev[0];
	end
	if (
		( SS2_expected_prev[1] !== 1'bx ) && ( SS2_prev[1] !== SS2_expected_prev[1] )
		&& ((SS2_expected_prev[1] !== last_SS2_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SS2_exp[1] = SS2_expected_prev[1];
	end
	if (
		( SS2_expected_prev[2] !== 1'bx ) && ( SS2_prev[2] !== SS2_expected_prev[2] )
		&& ((SS2_expected_prev[2] !== last_SS2_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SS2_exp[2] = SS2_expected_prev[2];
	end
	if (
		( SS2_expected_prev[3] !== 1'bx ) && ( SS2_prev[3] !== SS2_expected_prev[3] )
		&& ((SS2_expected_prev[3] !== last_SS2_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SS2_exp[3] = SS2_expected_prev[3];
	end
	if (
		( SS2_expected_prev[4] !== 1'bx ) && ( SS2_prev[4] !== SS2_expected_prev[4] )
		&& ((SS2_expected_prev[4] !== last_SS2_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SS2_exp[4] = SS2_expected_prev[4];
	end
	if (
		( SS2_expected_prev[5] !== 1'bx ) && ( SS2_prev[5] !== SS2_expected_prev[5] )
		&& ((SS2_expected_prev[5] !== last_SS2_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SS2_exp[5] = SS2_expected_prev[5];
	end
	if (
		( SS2_expected_prev[6] !== 1'bx ) && ( SS2_prev[6] !== SS2_expected_prev[6] )
		&& ((SS2_expected_prev[6] !== last_SS2_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS2_expected_prev);
		$display ("     Real value = %b", SS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SS2_exp[6] = SS2_expected_prev[6];
	end
	if (
		( SS3_expected_prev[0] !== 1'bx ) && ( SS3_prev[0] !== SS3_expected_prev[0] )
		&& ((SS3_expected_prev[0] !== last_SS3_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SS3_exp[0] = SS3_expected_prev[0];
	end
	if (
		( SS3_expected_prev[1] !== 1'bx ) && ( SS3_prev[1] !== SS3_expected_prev[1] )
		&& ((SS3_expected_prev[1] !== last_SS3_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SS3_exp[1] = SS3_expected_prev[1];
	end
	if (
		( SS3_expected_prev[2] !== 1'bx ) && ( SS3_prev[2] !== SS3_expected_prev[2] )
		&& ((SS3_expected_prev[2] !== last_SS3_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SS3_exp[2] = SS3_expected_prev[2];
	end
	if (
		( SS3_expected_prev[3] !== 1'bx ) && ( SS3_prev[3] !== SS3_expected_prev[3] )
		&& ((SS3_expected_prev[3] !== last_SS3_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SS3_exp[3] = SS3_expected_prev[3];
	end
	if (
		( SS3_expected_prev[4] !== 1'bx ) && ( SS3_prev[4] !== SS3_expected_prev[4] )
		&& ((SS3_expected_prev[4] !== last_SS3_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SS3_exp[4] = SS3_expected_prev[4];
	end
	if (
		( SS3_expected_prev[5] !== 1'bx ) && ( SS3_prev[5] !== SS3_expected_prev[5] )
		&& ((SS3_expected_prev[5] !== last_SS3_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SS3_exp[5] = SS3_expected_prev[5];
	end
	if (
		( SS3_expected_prev[6] !== 1'bx ) && ( SS3_prev[6] !== SS3_expected_prev[6] )
		&& ((SS3_expected_prev[6] !== last_SS3_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS3_expected_prev);
		$display ("     Real value = %b", SS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SS3_exp[6] = SS3_expected_prev[6];
	end
	if (
		( SS4_expected_prev[0] !== 1'bx ) && ( SS4_prev[0] !== SS4_expected_prev[0] )
		&& ((SS4_expected_prev[0] !== last_SS4_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS4_expected_prev);
		$display ("     Real value = %b", SS4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SS4_exp[0] = SS4_expected_prev[0];
	end
	if (
		( SS4_expected_prev[1] !== 1'bx ) && ( SS4_prev[1] !== SS4_expected_prev[1] )
		&& ((SS4_expected_prev[1] !== last_SS4_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS4_expected_prev);
		$display ("     Real value = %b", SS4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SS4_exp[1] = SS4_expected_prev[1];
	end
	if (
		( SS4_expected_prev[2] !== 1'bx ) && ( SS4_prev[2] !== SS4_expected_prev[2] )
		&& ((SS4_expected_prev[2] !== last_SS4_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS4_expected_prev);
		$display ("     Real value = %b", SS4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SS4_exp[2] = SS4_expected_prev[2];
	end
	if (
		( SS4_expected_prev[3] !== 1'bx ) && ( SS4_prev[3] !== SS4_expected_prev[3] )
		&& ((SS4_expected_prev[3] !== last_SS4_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS4_expected_prev);
		$display ("     Real value = %b", SS4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SS4_exp[3] = SS4_expected_prev[3];
	end
	if (
		( SS4_expected_prev[4] !== 1'bx ) && ( SS4_prev[4] !== SS4_expected_prev[4] )
		&& ((SS4_expected_prev[4] !== last_SS4_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS4_expected_prev);
		$display ("     Real value = %b", SS4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SS4_exp[4] = SS4_expected_prev[4];
	end
	if (
		( SS4_expected_prev[5] !== 1'bx ) && ( SS4_prev[5] !== SS4_expected_prev[5] )
		&& ((SS4_expected_prev[5] !== last_SS4_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS4_expected_prev);
		$display ("     Real value = %b", SS4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SS4_exp[5] = SS4_expected_prev[5];
	end
	if (
		( SS4_expected_prev[6] !== 1'bx ) && ( SS4_prev[6] !== SS4_expected_prev[6] )
		&& ((SS4_expected_prev[6] !== last_SS4_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SS4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SS4_expected_prev);
		$display ("     Real value = %b", SS4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SS4_exp[6] = SS4_expected_prev[6];
	end
	if (
		( count_expected_prev[0] !== 1'bx ) && ( count_prev[0] !== count_expected_prev[0] )
		&& ((count_expected_prev[0] !== last_count_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_count_exp[0] = count_expected_prev[0];
	end
	if (
		( count_expected_prev[1] !== 1'bx ) && ( count_prev[1] !== count_expected_prev[1] )
		&& ((count_expected_prev[1] !== last_count_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_count_exp[1] = count_expected_prev[1];
	end
	if (
		( count_expected_prev[2] !== 1'bx ) && ( count_prev[2] !== count_expected_prev[2] )
		&& ((count_expected_prev[2] !== last_count_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_count_exp[2] = count_expected_prev[2];
	end
	if (
		( count_expected_prev[3] !== 1'bx ) && ( count_prev[3] !== count_expected_prev[3] )
		&& ((count_expected_prev[3] !== last_count_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_count_exp[3] = count_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module wordle_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg enter;
reg [9:0] switch_input;
// wires                                               
wire LED1;
wire LED2;
wire LED3;
wire LED4;
wire [6:0] SS1;
wire [6:0] SS2;
wire [6:0] SS3;
wire [6:0] SS4;
wire [3:0] count;

wire sampler;                             

// assign statements (if any)                          
wordle i1 (
// port map - connection between master ports and signals/registers   
	.LED1(LED1),
	.LED2(LED2),
	.LED3(LED3),
	.LED4(LED4),
	.SS1(SS1),
	.SS2(SS2),
	.SS3(SS3),
	.SS4(SS4),
	.clk(clk),
	.count(count),
	.enter(enter),
	.switch_input(switch_input)
);

// clk
initial
begin
	repeat(98)
	begin
		clk = 1'b0;
		clk = #5000 1'b1;
		# 5000;
	end
	clk = 1'b0;
end 

// enter
initial
begin
	enter = 1'b1;
	enter = #10000 1'b0;
	enter = #30000 1'b1;
	enter = #10000 1'b0;
	enter = #30000 1'b1;
	enter = #10000 1'b0;
	enter = #30000 1'b1;
	enter = #10000 1'b0;
	enter = #30000 1'b1;
	enter = #10000 1'b0;
	enter = #30000 1'b1;
	enter = #10000 1'b0;
end 
// switch_input[ 9 ]
initial
begin
	switch_input[9] = 1'b0;
	switch_input[9] = #60000 1'b1;
	switch_input[9] = #10000 1'b0;
end 
// switch_input[ 8 ]
initial
begin
	switch_input[8] = 1'b0;
	switch_input[8] = #100000 1'b1;
	switch_input[8] = #10000 1'b0;
end 
// switch_input[ 7 ]
initial
begin
	switch_input[7] = 1'b0;
	switch_input[7] = #20000 1'b1;
	switch_input[7] = #10000 1'b0;
end 
// switch_input[ 6 ]
initial
begin
	switch_input[6] = 1'b0;
end 
// switch_input[ 5 ]
initial
begin
	switch_input[5] = 1'b0;
	switch_input[5] = #140000 1'b1;
	switch_input[5] = #10000 1'b0;
end 
// switch_input[ 4 ]
initial
begin
	switch_input[4] = 1'b0;
end 
// switch_input[ 3 ]
initial
begin
	switch_input[3] = 1'b0;
end 
// switch_input[ 2 ]
initial
begin
	switch_input[2] = 1'b0;
end 
// switch_input[ 1 ]
initial
begin
	switch_input[1] = 1'b0;
end 
// switch_input[ 0 ]
initial
begin
	switch_input[0] = 1'b0;
end 

wordle_vlg_sample_tst tb_sample (
	.clk(clk),
	.enter(enter),
	.switch_input(switch_input),
	.sampler_tx(sampler)
);

wordle_vlg_check_tst tb_out(
	.LED1(LED1),
	.LED2(LED2),
	.LED3(LED3),
	.LED4(LED4),
	.SS1(SS1),
	.SS2(SS2),
	.SS3(SS3),
	.SS4(SS4),
	.count(count),
	.sampler_rx(sampler)
);
endmodule

